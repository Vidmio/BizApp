@page "/Stavke"
@page "/Stavke/{IDfk}"
@using Repository.Interface
@using Model

@inject NotificationService NotificationService
@inject DialogService DialogService
@inject IGenericRepository<Stavka> Repository
@inject NavigationManager NavigationManager

<RadzenDataGrid Data="@stavke"
                @ref="grid"
                TItem="Stavka"
                AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                AllowSorting="true"
                AllowVirtualization="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <HeaderTemplate>
        <RadzenText TextStyle="TextStyle.DisplayH4">Stavke fakture</RadzenText>
        <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Button" Text="DODAJ" Icon="add" class="mb-2" Click="ShowInsertForm" />
    </HeaderTemplate>
    <Columns>

        <RadzenDataGridColumn TItem="Stavka" Property="@nameof(Stavka.ID)" Title="ID" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Stavka" Property="FakturaID" Title="FakturaID" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Stavka" Property="Proizvod.Naziv" Title="Proizvod" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Stavka" Property="Kolicina" Title="Kolicina" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Stavka" Property="Proizvod.JedinicnaCena" Title="Jedinicna Cena" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Stavka" Property="Cena" Title="Ukupna Cena" Filterable="true" Width="100px">
            <FooterTemplate>
                <b>Ukupno: @stavke.Sum(o => o.Cena)</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Stavka" Property="Naruceno" Title="Naručeno" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Stavka" Property="Montirano" Title="Montirano" Filterable="true" Width="100px" />
        <RadzenDataGridColumn TItem="Stavka" Width="80px" TextAlign="TextAlign.End" Filterable="false" Sortable="false" Pickable="false">
            <Template Context="context">
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Primary" Icon="edit" Size="ButtonSize.ExtraSmall" Click="@(() => ShowUpdateForm(context))" />
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Icon="delete" Size="ButtonSize.ExtraSmall" Click="@(() => Delete(context))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    [Parameter]
    public string? IDfk { get; set; }
    int IDInt = 0;

    RadzenDataGrid<Stavka> grid;

    public List<Stavka> stavke = new List<Stavka>();
    //IList<Stavka> Selected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    public async void ShowUpdateForm(Stavka stavka)
    {
        dynamic x = await DialogService.OpenAsync<Form>("Izmeni", new Dictionary<string, object>()
        {
            {"Id",stavka.ID}
        });
        if (x != null && x is bool)
        {
            if (x)
            {
                await Refresh();
                NotificationService.Notify(NotificationSeverity.Success, "Uspešno", "Izmene uspešno sačuvane", 3000);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Greška", "Greška prilikom izmene", 3000);
            }
        }

    }

    public async Task ShowInsertForm()
    {
        dynamic x = await DialogService.OpenAsync<Form>("Dodaj");
        if (x != null && x is bool)
        {
            if (x)
            {
                await Refresh();
                NotificationService.Notify(NotificationSeverity.Success, "Uspešno", "Uspešno sačuvan", 3000);
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Greška", "Greška prilikom dodavanja novog", 3000);
            }
        }
    }

    public async Task Refresh()
    {
        stavke = await Repository.Get();

        Int32.TryParse(IDfk, out IDInt);
        if (IDInt != 0)
        {
            stavke = stavke.Where(f => f.FakturaID == IDInt).ToList();
            StateHasChanged();
        }
        foreach (var item in stavke)
        {
             item.Cena = item.Kolicina * item.Proizvod.JedinicnaCena;
        }
        StateHasChanged();
    }


    protected async Task Delete(Stavka del)
    {
        var confirmResult = await DialogService.Confirm("Da li ste sigurni?", "Obriši", new ConfirmOptions() { OkButtonText = "Da", CancelButtonText = "Ne" });

        if (confirmResult.HasValue && confirmResult.Value)
        {
            dynamic x = Repository.Delete(del);

            if (x != null && x is bool)
            {
                if (x)
                {
                    await Refresh();
                    NotificationService.Notify(NotificationSeverity.Success, "Uspešno", "Uspešno obrisan", 3000);
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Greška", "Greška prilikom brisanja", 3000);
                }
            }
        }
    }

}
